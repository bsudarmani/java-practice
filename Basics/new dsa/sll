#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertAtBegin(int data) {
    struct Node* newNode = createNode(data);
    newNode->next = head;
    head = newNode;
}


void insertAtEnd(int data) {
    struct Node* newNode;
    struct Node* temp;

    if (head == NULL) {
        insertAtBegin(data);
        return;
    }
    newNode = createNode(data);
    temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}


void insertAtKthPos(int pos, int data) {
    int i;
    struct Node* newNode;
    struct Node* temp;

    if (pos == 1 || head == NULL) {
        insertAtBegin(data);
        return;
    }
    newNode = createNode(data);
    temp = head;
    for (i = 1; i < pos - 1 && temp != NULL; i++) {
        temp = temp->next;
    }
    if (temp != NULL) {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}


void display() {
    struct Node* temp;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    temp = head;
    printf("\nList elements:");
    while (temp != NULL) {
        printf(" %d", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void updateValue(int oldVal, int newVal) {
    struct Node* temp;
    int flag = 0;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    temp = head;
    while (temp != NULL) {
        if (temp->data == oldVal) {
            temp->data = newVal;
            flag = 1;
        }
        temp = temp->next;
    }
    if (flag)
        printf("\nValue updated successfully\n");
    else
        printf("\nValue not found\n");
}

void deleteAtBegin() {
    struct Node* temp;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    temp = head;
    head = head->next;
    free(temp);
    printf("\nNode deleted from beginning\n");
}

void deleteAtEnd() {
    struct Node* temp;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    if (head->next == NULL) {
        free(head);
        head = NULL;
        printf("\nLast node deleted\n");
        return;
    }
    temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
    printf("\nNode deleted from end\n");
}


void deleteAtKthPos(int pos) {
    struct Node* temp;
    struct Node* del;
    int i;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    if (pos == 1) {
        deleteAtBegin();
        return;
    }
    temp = head;
    for (i = 1; i < pos - 1 && temp->next != NULL; i++) {
        temp = temp->next;
    }
    del = temp->next;
    if (del != NULL) {
        temp->next = del->next;
        free(del);
        printf("\nNode deleted from position %d\n", pos);
    }
}


void removeNodeSLL(int val) {
    struct Node* temp;
    struct Node* prev = NULL;

    if (head == NULL) {
        printf("\nList is empty\n");
        return;
    }
    temp = head;
    while (temp != NULL) {
        if (temp->data == val) {
            if (prev == NULL) { /* deleting head */
                head = temp->next;
                free(temp);
                printf("\nNode with value %d removed\n", val);
                return;
            } else {
                prev->next = temp->next;
                free(temp);
                printf("\nNode with value %d removed\n", val);
                return;
            }
        }
        prev = temp;
        temp = temp->next;
    }
    printf("\nValue %d not found\n", val);
}


void reverseSLL() {
    struct Node* prev = NULL;
    struct Node* current = head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
    printf("\nList reversed successfully\n");
}


int main() {
    int choice, data, pos, oldVal, newVal;

    while (1) {
        printf("\n--- Singly Linked List Operations ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert at Kth Position\n");
        printf("4. Update Value\n");
        printf("5. Delete at Beginning\n");
        printf("6. Delete at End\n");
        printf("7. Delete at Kth Position\n");
        printf("8. Remove Node by Value\n");
        printf("9. Reverse List\n");
        printf("10. Display List\n");
        printf("11. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &data);
                insertAtBegin(data);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 3:
                printf("Enter position and value: ");
                scanf("%d %d", &pos, &data);
                insertAtKthPos(pos, data);
                break;
            case 4:
                printf("Enter old value and new value: ");
                scanf("%d %d", &oldVal, &newVal);
                updateValue(oldVal, newVal);
                break;
            case 5:
                deleteAtBegin();
                break;
            case 6:
                deleteAtEnd();
                break;
            case 7:
                printf("Enter position: ");
                scanf("%d", &pos);
                deleteAtKthPos(pos);
                break;
            case 8:
                printf("Enter value to remove: ");
                scanf("%d", &data);
                removeNodeSLL(data);
                break;
            case 9:
                reverseSLL();
                break;
            case 10:
                display();
                break;
            case 11:
                printf("\nExiting program...\n");
                exit(0);
            default:
                printf("\nInvalid choice! Try again.\n");
        }
    }

    return 0;
}
