from abc import ABC, abstractmethod

# Abstract base class
class Shape(ABC):
    
    @abstractmethod
    def area(self):
        pass
    
    @abstractmethod
    def perimeter(self):
        pass

# Subclass implementing abstract methods
class Rectangle(Shape):
    
    def __init__(self, length, breadth):
        self.length = length
        self.breadth = breadth
    
    def area(self):
        return self.length * self.breadth
    
    def perimeter(self):
        return 2 * (self.length + self.breadth)

# Subclass implementing abstract methods
class Circle(Shape):
    
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius * self.radius
    
    def perimeter(self):
        return 2 * 3.14 * self.radius

# Test
r = Rectangle(10, 5)
print("📐 Rectangle Area:", r.area())
print("📏 Rectangle Perimeter:", r.perimeter())

c = Circle(7)
print("⚪ Circle Area:", c.area())
print("🧭 Circle Perimeter:", c.perimeter())
